# –ö–ª–∞—Å—Å Point. –ß–∞—Å—Ç—å 2
# –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞ Point –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –µ—â–µ –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
# get_distance, –∫–æ—Ç–æ—Ä—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Point. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ get_distance –¥–æ–ª–∂–Ω–æ
# –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏. –ï–≥–æ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ–æ—Ä–µ–º—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞.
#
# –ù–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –¥–≤—É—Ö —Ç–æ—á–µ–∫ –∏–º–µ—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã x –∏ y. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã —É –æ–¥–Ω–æ–π
# —Ç–æ—á–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ç—Ä–∏–±—É—Ç—ã x –∏–ª–∏ y, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã¬ª –∏ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ None.
#
# –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Point, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞¬ª
# –∏ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ None.
#
# üöÄ–ü–æ–¥—Å–∫–∞–∑–∫–∞üöÄ
# –í—Å–ø–æ–º–∏–Ω–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é isinstance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏

class Point:
    def set_coordinates(self, x, y):
        self.x = x
        self.y = y

    def get_distance_to_origin(self):
        return (self.x ** 2 + self.y ** 2) ** 0.5 if hasattr(self, "x") and hasattr(self, "y") else None

    def get_distance(self, point):
        if isinstance(point, Point) == False:
            print("–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞")
        else:
            if (hasattr(self, "x") == False or hasattr(self, "y") == False) or (hasattr(point, "x") == False or
                                                                                hasattr(point, "y") == False):
                print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")
            else:
                return ((self.x - point.x) ** 2 + (self.y - point.y) ** 2) ** 0.5

    def display(self):
        if hasattr(self, "x") == False or hasattr(self, "y") == False:
            print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")
        else:
            print(f"Point({self.x}, {self.y})")